parameters:
- name: project_name
  type: string
- name: version_tag
  type: string
- name: target_docker_registry
  type: string
- name: windows_pool_name
  type: string
  default: Azure Pipelines
- name: windows_pool_vm
  type: string
  default: windows-latest
- name: solution_image_artifact
  type: string
  default: Windows_solution
- name: push_image
  type: string
  default: 'true'

jobs:
- job: build_solution
  displayName: Build solution
  pool:
    name: '${{ parameters.windows_pool_name }}'
    vmImage: '${{ parameters.windows_pool_vm }}'
  steps:
  - checkout: self

  - pwsh: |
      Set-Content -Path src/Project/Platform/code/version.txt -Value "$(Build.BuildNumber)"
    displayName: Add version.txt file
    
  - template: build-steps.yml
    parameters:
      project_name: ${{ variables.project_name }}
      version_tag: $(version_tag)
      target_docker_registry: $(target_docker_registry)
      compose_file: docker-compose.yml
      service_names: solution
      artifact_name: ${{ parameters.solution_image_artifact }}
      push_images: ${{ parameters.push_image }}

  - pwsh: |
      $registry = "${env:TARGET_REGISTRY}"
      if($registry -ne "") { $registry = "${registry}/" }
      $solutionTag = ("{0}{1}-{2}:{3}" -f $registry, $env:PROJECT_NAME, "solution", $env:VERSION)
      Write-Host "Create container ${solutionTag}"
      $containerId = $(docker create $solutionTag)
      docker cp ${containerId}:c:\artifacts\docs "$(Build.ArtifactStagingDirectory)\docs"
      docker rm $containerId
    displayName: Extract artifacts
    env:
      PROJECT_NAME: ${{ variables.project_name }}
      TARGET_REGISTRY: $(target_docker_registry)
      VERSION: $(names.version)

  - task: PublishPipelineArtifact@1
    inputs:
      artifact: docs
      path: '$(Build.ArtifactStagingDirectory)\docs'
    displayName: Publish docs artifacts
