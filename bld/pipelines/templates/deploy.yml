parameters:
- name: project_name
  type: string
- name: environment_name
  type: string
- name: namespace
  type: string
- name: master_resource_name
  type: string
- name: k8s_admin_connection
  type: string
- name: dns_tld
  type: string
- name: deploytype
  type: string
  default: nonproduction
- name: artifactpipeline
  type: string
  default: current
- name: pool_name
  type: string
  default: Azure Pipelines
- name: pool_vm
  type: string
  default: ubuntu-latest
- name: kubectl_version
  type: string
  default:  1.23.4
- name: hostname_services
  type: string
  default: cm id cd

jobs:
- deployment: deploy
  displayName: Deploy platform
  pool:
    name: ${{ parameters.pool_name }}
    vmImage: ${{ parameters.pool_vm }}
  environment: '${{ parameters.environment_name }}.${{parameters.namespace }}'
  strategy:
    runOnce:
      deploy:
        steps:

        - task: KubectlInstaller@0
          inputs:
            kubectlVersion: ${{ parameters.kubectl_version }}

        - pwsh: |
            $namespaceLower = "${{ parameters.namespace }}".ToLower().Substring(0, [math]::Min(58, "${{ parameters.namespace }}".Length)).Replace("_", "-")
            Write-Host "##vso[task.setvariable variable=namespace;isOutput=true]$namespaceLower"
          name: names
          displayName: Set names

        - task: DownloadSecureFile@1
          name: getLicense
          inputs:
            secureFile: license.${{ parameters.environment_name }}.xml
          displayName: Download Sitecore license
        
        - download: ${{parameters.artifactpipeline }}
          artifact: manifests
          displayName: Download manifests

        - pwsh: |
            Move-Item "$(Pipeline.Workspace)/${{ parameters.artifactpipeline }}/manifests" $(Pipeline.Workspace)/ -Verbose
          displayName: Move manifests to common location
          condition: ne('${{ parameters.artifactpipeline }}', 'current')


        - pwsh: |
            $newLicensePath = "$(Pipeline.Workspace)/manifests/sitecore/ltsc2019/xm1/secrets/sitecore-license.txt"
            If(test-path $newLicensePath) {
              Write-Host "Remove existing license file"
              Remove-Item $newLicensePath
            }

            $parentFolder = split-path $newLicensePath -Parent
            if(-not (test-path $parentFolder)) {
              Write-Host "parent folder ${parentFolder} not existing"
              New-Item $parentFolder -ItemType Directory
            }

            $Stream = [System.IO.File]::OpenRead("$(getLicense.secureFilePath)")
            try {
              $memory = [System.IO.MemoryStream]::new()
              $gzip = [System.IO.Compression.GZipStream]::new($memory, [System.IO.Compression.CompressionLevel]::Optimal, $false)
              $Stream.CopyTo($gzip)
              $gzip.Close()
              $encodedString = [System.Convert]::ToBase64String($memory.ToArray())
            }
            finally {
              if ($null -ne $gzip) {
                  $gzip.Dispose()
                  $gzip = $null
              }

              if ($null -ne $memory) {
                  $memory.Dispose()
                  $memory = $null
              }

              $Stream.Dispose()
              $Stream = $null
            }

            Set-Content -Path $newLicensePath -Value $encodedString -Encoding ascii
          displayName: Encode license file

# dynamic environment resource steps (ReviewApp@0 workarounds)
        - task: Kubernetes@1
          inputs:
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: apply
            useConfigurationFile: true
            inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(names.namespace)" }}'
          displayName: 'Deploy namespace'

        - task: Kubernetes@1
          name: getMasterServiceAccounts
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: get
            arguments: serviceaccount
            namespace: ${{ parameters.master_resource_name }}
            outputFormat: jsonpath="{.items.*.metadata.name}"
          displayName: Get master service accounts

        - pwsh: |
            $output = $(getMasterServiceAccounts.KubectlOutput)
            $account = $output.Trim().Replace(",", "") -split " " | Where-Object { $_ -like "azdev-sa-*" } | Select-Object -First 1

            if([string]::IsNullOrEmpty($account))
            {
              throw "Could not find service account in '$output'."
            }

            Write-Host "Found master service account: $account."
            Write-Host "##vso[task.setvariable variable=master_resource_k8s_service_account]$account"
          displayName: Set master service account

        - task: ReviewApp@0
          inputs:
            resourceName: ${{ parameters.master_resource_name }}
          displayName: Deploy dynamic environment resource

        - task: Kubernetes@1
          inputs:
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: apply
            useConfigurationFile: true
            inline: '{ "apiVersion": "rbac.authorization.k8s.io/v1", "kind": "RoleBinding", "metadata": { "name": "$(names.namespace)-view", "namespace": "$(names.namespace)" }, "roleRef": { "apiGroup": "rbac.authorization.k8s.io", "kind": "ClusterRole", "name": "view" }, "subjects": [ { "kind": "ServiceAccount", "name": "$(master_resource_k8s_service_account)", "namespace": "${{ parameters.master_resource_name }}" } ] }'
          displayName: Deploy rolebinding for dynamic environment resource
# /dynamic environment resource steps (ReviewApp@0 workarounds)

        - powershell: |
            "${{parameters.hostname_services }}" -split " " | ForEach-Object {
              $service = "$_"
              $hostname = "{0}-{1}{2}" -f $service, $env:NAMESPACE, $env:DNS_TLD

              $path = "$(Pipeline.Workspace)/manifests/bases/common/${service}-hostname"
              if(-not (Test-Path $path)) {
                $path = "$(Pipeline.Workspace)/manifests/sitecore/ltsc2019/xm1/configmaps/${service}-hostname"
              }

              Set-Content -Path (Resolve-Path $path) -Value $hostname -NoNewLine
            }
          env:
            NAMESPACE: $(names.namespace)
            DNS_TLD: ${{ parameters.dns_tld }}
          displayName: Create hostname configmap

        - powershell: |
            Get-ChildItem -Filter "*-database*username.txt" | Set-Content -NoNewLine -Value '$(SQL_USER_USERNAME)' ;
            Get-ChildItem -Filter "*-database*password.txt" | Set-Content -NoNewLine -Value '$(SQL_USER_PASSWORD)';
            Set-Content -NoNewLine -Path sitecore-databaseusername.txt -Value 'sa' ;
            Set-Content -NoNewLine -Path sitecore-databasepassword.txt -Value '$(SQL_SA_PASSWORD)' ;
            Set-Content -NoNewLine -Path sitecore-adminpassword.txt -Value   '$(SITECORE_ADMIN_PASSWORD)' ;
            Set-Content -NoNewLine -Path sitecore-reportingapikey.txt -Value '$(REPORTING_API_KEY)' ;
            Set-Content -NoNewLine -Path sitecore-telerikencryptionkey.txt -Value '$(TELERIK_ENCRYPTION_KEY)' ;
            Set-Content -NoNewLine -Path sitecore-identitysecret.txt -Value '$(SITECORE_IDSECRET)' ;
            Set-Content -NoNewLine -Path sitecore-identitycertificate.txt -Value '$(SITECORE_ID_CERTIFICATE)' ;
            Set-Content -NoNewLine -Path sitecore-identitycertificatepassword.txt -Value '$(SITECORE_ID_CERTIFICATE_PASSWORD)' ;
            Set-Content -NoNewLine -Path sitecore-media-request-protection-shared-secret.txt -Value '$(MEDIA_REQUEST_PROTECTION_SHARED_SECRET)' ;
          workingDirectory: $(Pipeline.Workspace)/manifests/sitecore/ltsc2019/xm1/secrets
          displayName: Create sitecore secrets files

        - powershell: |
            Set-Content -NoNewLine -Path cli-clientid.txt     -Value '$(SITECORE_CLI_CLIENTID)' ;
            Set-Content -NoNewLine -Path cli-clientsecret.txt -Value '$(SITECORE_CLI_CLIENTSECRET)' ;
          workingDirectory: $(Pipeline.Workspace)/manifests/bases/common
          displayName: Create custom secrets files

        - task: Kubernetes@1
          inputs:
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: apply
            useConfigurationFile: true
            inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(names.namespace)" }}'
          displayName: 'Deploy namespace'

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: apply
            namespace: $(names.namespace)
            arguments: --validate=false -k "$(Pipeline.Workspace)/manifests/overlays/${{ parameters.deploytype }}"
            outputFormat: ''
          displayName: Deploy manifest

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: wait
            namespace: $(names.namespace)
            arguments: --for=condition=Complete jobs solr-init mssql-init --timeout=30m
            outputFormat: ''
          displayName: Wait for storage init containers to complete

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: logs
            namespace: $(names.namespace)
            arguments: job/mssql-init
            outputFormat: ''
          displayName: Get mssql-init logs

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: logs
            namespace: $(names.namespace)
            arguments: job/solr-init
            outputFormat: ''
          displayName: Get solr-init logs

        # - task: Kubernetes@1
        #   continueOnError: true
        #   inputs:
        #     connectionType: Kubernetes Service Connection
        #     kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
        #     command: delete
        #     namespace: $(names.namespace)
        #     arguments: job mssql-init solr-init
        #     outputFormat: ''
        #   displayName: Remove storage init containers

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: rollout
            namespace: $(names.namespace)
            arguments: status deployment cm --watch=true --timeout=30m
            outputFormat: ''
          displayName: Wait on CM deployment
          continueOnError: true

        - pwsh: |
            Start-Sleep -Seconds 30
          displayName: Wait a bit

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: wait
            namespace: $(names.namespace)
            arguments: --for=condition=Ready --selector=app=cm,version=$(Build.BuildNumber) pod --timeout=30m
            outputFormat: json
          displayName: Wait on CM to become ready

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: get
            namespace: $(names.namespace)
            arguments: deployment
            outputFormat: wide
          displayName: Show current deployment status
          condition: always()

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: get
            namespace: $(names.namespace)
            arguments: pod --selector version=$(Build.BuildNumber)
            outputFormat: wide
          displayName: Show current pods status
          condition: always()

        - task: Kubernetes@1
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: get
            namespace: $(names.namespace)
            arguments: events --sort-by=".metadata.managedFields[0].time"
            outputFormat: wide
          displayName: Show events from cluster
          condition: failed()

        - task: Kubernetes@1
          name: getIngress
          inputs:
            connectionType: Kubernetes Service Connection
            kubernetesServiceEndpoint: ${{ parameters.k8s_admin_connection }}
            command: get
            namespace: $(names.namespace)
            arguments: ingress
            outputFormat: jsonpath="{range .items[*].spec.tls[*]}{.hosts[*]} {end}"
          displayName: Get ingress hosts

        - powershell: |
            $ingressHosts = $(getIngress.KubectlOutput).Trim() -split " "
            $message = "`nYou solution has now been deployed!`n`n"
            $message += "Ingress has the following tls hostnames exposed:`n`n"

            $ingressHosts | ForEach-Object {
              $message += "- https://$_`n"
            }

            Write-Host $message
          displayName: Print ingress hosts
