version: "2.4"

services:

  # A servercore image with both the netcore and netframework SDKs.
  # See Dockerfile for more details.
  dotnetsdk:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
    build:
      context: ./docker/build/dotnetsdk
    scale: 0

  # The solution build image is added here so it can be referenced as a build dependency
  # for the images which use its output. Setting "scale: 0" means docker-compose will not
  # include it in the running environment. See Dockerfile for more details.
  solution:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-solution:${VERSION:-latest}
    build:
      context: .
      dockerfile: docker/build/solution/Dockerfile
      args:
        BUILD_CONFIGURATION: ${BUILD_CONFIGURATION}
        BUILD_IMAGE: ${TARGET_REGISTRY}${PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
    depends_on:
      - dotnetsdk
    scale: 0

  # Mount our SQL data folder and use our custom image with the Headless Services (JSS)
  # module data added. See Dockerfile for details.
  mssql-init:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-mssql-init:${VERSION:-latest}
    build:
      context: ./docker/build/mssql-init
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-mssql-init:${SITECORE_VERSION}
        HEADLESS_SERVICES_IMAGE: ${HEADLESS_SERVICES_IMAGE}


  # Mount our Solr data folder and use our retagged Solr image.
  # Some modules (like SXA) also require additions to the Solr image.
  solr-init:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-solr-init:${VERSION:-latest}
    build:
      context: ./docker/build/solr-init
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-solr-init:${SITECORE_VERSION}

  # Use our retagged Identity Server image.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  id:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-id:${VERSION:-latest}
    build:
      context: ./docker/build/id
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-id6:${SITECORE_VERSION}

  # Use our custom CM (xm0 Standalone) image with added modules and solution code.
  # Folders are mounted below for code deployment and log output. See Dockerfile for details.
  # Configure for a mounted license file instead of using SITECORE_LICENSE.
  cm:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-cm:${VERSION:-latest}
    build:
      context: ./docker/build/cm
      args:
        PARENT_IMAGE: ${SITECORE_DOCKER_REGISTRY}sitecore-xm1-cm:${SITECORE_VERSION}
        SOLUTION_IMAGE: ${TARGET_REGISTRY}${PROJECT_NAME}-solution:${VERSION:-latest}
        TOOLS_IMAGE: ${TOOLS_IMAGE}
        MANAGEMENT_SERVICES_IMAGE: ${MANAGEMENT_SERVICES_IMAGE}
        HEADLESS_SERVICES_IMAGE: ${HEADLESS_SERVICES_IMAGE}
    depends_on:
      - solution

  # This is our custom image for an ASP.NET Core Rendering Host.
  # If target is 'debug', it will use the SDK image as parent and run 'dotnet watch.'
  # Otherwise, it's a standard ASP.NET Core container. See Dockerfile for details.
  rendering:
    image: ${TARGET_REGISTRY}${PROJECT_NAME}-rendering:${VERSION:-latest}
    build:
      context: ./docker/build/rendering
      target: ${BUILD_CONFIGURATION}
      args:
        DEBUG_PARENT_IMAGE: ${TARGET_REGISTRY}${PROJECT_NAME}-dotnetsdk:${VERSION:-latest}
        SOLUTION_IMAGE: ${TARGET_REGISTRY}${PROJECT_NAME}-solution:${VERSION:-latest}
    depends_on:
      - solution
      - cm
